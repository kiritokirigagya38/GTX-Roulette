import discord
import json
import asyncio
import os
import sys
from discord.ext import commands
from dotenv import load_dotenv

# Charger variables d'environnement
load_dotenv()
TOKEN = os.getenv("DISCORD_TOKEN")

# Charger config.json
with open("config.json", "r", encoding="utf-8") as f:
    config = json.load(f)

# Intents
intents = discord.Intents.default()
intents.message_content = True

bot = commands.Bot(command_prefix=config["prefix"], intents=intents)

# IDs des propri√©taires autoris√©s
OWNER_IDS = {199541824212172801, 512700060329443328}

# Variable pour stocker le dernier salon utilis√©
last_channel_id = None

@bot.event
async def on_ready():
    print(f"‚öúÔ∏è Connect√© en tant que {bot.user}")

    # Si un salon a √©t√© m√©moris√© ‚Üí envoyer le message dedans
    global last_channel_id
    if last_channel_id:
        channel = bot.get_channel(last_channel_id)
        if channel:
            await channel.send("‚úÖ Le bot est de retour en ligne et pr√™t √† rouler üé≤ !")

# ‚úÖ Commande reboot stable
@bot.command(name="reboot")
async def reboot(ctx):
    """Red√©marre le bot (r√©serv√© aux propri√©taires)"""
    if ctx.author.id not in OWNER_IDS:
        await ctx.send("‚õî Tu n‚Äôas pas la permission de red√©marrer le bot.")
        return

    global last_channel_id
    last_channel_id = ctx.channel.id  # M√©moriser le salon du reboot

    await ctx.send("üîÑ Red√©marrage en cours...")
    await bot.close()
    sys.exit(0)

async def main():
    async with bot:
        if "cogs.roulette" not in bot.extensions:
            await bot.load_extension("cogs.roulette")
            print("‚úÖ Cog 'roulette' charg√©")
        else:
            print("‚ö†Ô∏è Cog 'roulette' d√©j√† charg√©, ignor√©")

        await bot.start(TOKEN)

asyncio.run(main())
