import discord
import json
import asyncio
import os
import sys
from discord.ext import commands
from dotenv import load_dotenv

# Charger variables d'environnement
load_dotenv()
TOKEN = os.getenv("DISCORD_TOKEN")

# Charger config.json
with open("config.json", "r", encoding="utf-8") as f:
    config = json.load(f)

# Intents
intents = discord.Intents.default()
intents.message_content = True

bot = commands.Bot(command_prefix=config["prefix"], intents=intents)

# IDs des propri√©taires autoris√©s
OWNER_IDS = {199541824212172801, 512700060329443328}

@bot.event
async def on_ready():
    print(f"‚öúÔ∏è Connect√© en tant que {bot.user}")

# ‚úÖ Commande reboot hybride
@bot.command(name="reboot")
async def reboot(ctx):
    """Red√©marre le bot (r√©serv√© aux propri√©taires)"""
    if ctx.author.id not in OWNER_IDS:
        await ctx.send("‚õî Tu n‚Äôas pas la permission de red√©marrer le bot.")
        return

    await ctx.send("üîÑ Red√©marrage en cours...")

    # Si une variable d'env RENDER est d√©tect√©e -> Render/Railway
    if os.getenv("RENDER") or os.getenv("RAILWAY_STATIC_URL"):
        await bot.close()
        sys.exit(0)  # Laisse l'h√©bergeur relancer
    else:
        # En local ou VPS -> red√©marrage imm√©diat
        await bot.close()
        os.execv(sys.executable, [sys.executable] + sys.argv)

async def main():
    async with bot:
        # üîí Charger une seule fois le cog
        if "cogs.roulette" not in bot.extensions:
            await bot.load_extension("cogs.roulette")
            print("‚úÖ Cog 'roulette' charg√©")
        else:
            print("‚ö†Ô∏è Cog 'roulette' d√©j√† charg√©, ignor√©")

        await bot.start(TOKEN)

asyncio.run(main())
